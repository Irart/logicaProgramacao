Já simplificamos a maneira de pular linhas criando a função pulaLinha(). Será que é possível fazermos o mesmo com o document.write()? Quando queremos exibir algo para o usuário, sempre temos que escrevê-lo, incluindo também a mensagem entre parênteses, como em:

document.write("Olá pessoal!");COPIAR CÓDIGO
É uma sintaxe extensa. Em vez de escrevermos tudo isso, criaremos uma função chamada mostra(). Quem mostra, mostra algo, portanto esta função receberá uma mensagem como parâmetro, em vez de nenhum. Se compararmos as instruções:

document.write("Olá pessoal!");

mostra("Olá pessoal");COPIAR CÓDIGO
Vemos que a segunda, além de mais sucinta, fica explícita nossa intenção de mostrar algo. Quando um terceiro olhar nosso código, ao ver mostra(), saberá que seu propósito é exibir algo na tela.

E como criamos a função mostra()? Primeiro colocaremos alguns trechos em comentários, por meio de barras duplas (//). O programa ignorará a referida linha, que continuará presente para fins didáticos, para lembrarmos o que havia antes.

<meta charset="UTF-8">

<script>

    function pulaLinha() {

        document.write("<br>");
        document.write("<br>");

}

var ano = 2016;

// document.write("Flávio tem " + (ano - 1977) + " anos");

pulaLinha();

// document.write("Joaquim tem " + (ano - 1996) + " anos");

pulaLinha();

ano = 2017;

// document.write("Barney tem " + (ano - 1976) + " anos");
// document.write("Olá pessoal!");

</script>COPIAR CÓDIGO
No lugar de document.write() queremos utilizar mostra():

var ano = 2016;

// document.write("Flávio tem " + (ano - 1977) + " anos");

mostra();

pulaLinha();

// document.write("Joaquim tem " + (ano - 1996) + " anos");

pulaLinha();

ano = 2017;

// document.write("Barney tem " + (ano - 1976) + " anos");
// document.write("Olá pessoal!");

</script>COPIAR CÓDIGO
Com isto queremos que seja exibido o resultado da concatenação:

document.write("Flávio tem " + (ano - 1977) + " anos");COPIAR CÓDIGO
O mesmo para todas as concatenações presentes no programa:

var ano = 2016;

// document.write("Flávio tem " + (ano - 1977) + " anos");

mostra("Flávio tem " + (ano - 1977) + " anos");

pulaLinha();

// document.write("Joaquim tem " + (ano - 1996) + " anos");

mostra("Joaquim tem " + (ano - 1996) + " anos");

pulaLinha();

ano = 2017;

// document.write("Barney tem " + (ano - 1976) + " anos");

mostra("Barney tem " + (ano - 1976) + " anos");

// document.write("Olá pessoal!");

mostra("Olá pessoal!");

</script>COPIAR CÓDIGO
Entretanto, a função mostra() não existe. Apagaremos os comentários apenas para diminuir a poluição visual:

var ano = 2016;

mostra("Flávio tem " + (ano - 1977) + " anos");

pulaLinha();

mostra("Joaquim tem " + (ano - 1996) + " anos");

pulaLinha();

ano = 2017;

mostra("Barney tem " + (ano - 1976) + " anos");

mostra("Olá pessoal!");

</script>COPIAR CÓDIGO
Nosso objetivo é que mostra() faça document.write(), que por sua vez recebe o que queremos exibir. O importante é que toda função seja declarada no início do arquivo, não importa se antes ou depois de pulaLinha(). Primeiro declararemos a função e o nome:

<meta charset="UTF-8">

<script>

    function pulaLinha() {

        document.write("<br>");
        document.write("<br>");

}

function mostra() {

}

var ano = 2016;COPIAR CÓDIGO
Em seguida, determinaremos o que ela fará:

function mostra() {

    document.write("Olá");

}COPIAR CÓDIGO
No programa, estamos passando diferentes concatenações para que a função mostra() exiba, mas o que será realmente exibido? Faremos um teste. Salvaremos o programa, retornaremos ao navegador e recarregaremos o programa. Obtivemos o seguinte:

Olá

Olá

OláOláCOPIAR CÓDIGO
Ou seja, o programa ignorou completamente o que havíamos passado para ser exibido, o parâmetro, e está exibindo somente Olá. Precisamos descobrir uma forma de os parâmetros serem transmitidos para o document.write() presente na construção da função. Como faremos isso?

Temos os parênteses obrigatórios após o nome da função:

function mostra() {
}COPIAR CÓDIGO
Escolheremos um nome aleatório para inserir, por exemplo ronaldo. Quando mostra() receber um parâmetro, ele será enviado para dentro da variável ronaldo. Ao chegar nessa instrução, o JS interpretará como se ronaldo fosse igual à frase que queremos exibir.

O parâmetro da função é considerado como se fosse uma variável. No caso, ronaldo recebe o que está sendo passado no programa, em mostra(). No caso do Olá pessoal!, ele exibirá este texto. Tendo definido o parâmetro da função, em document.write(), o incluiremos como parâmetro também:

function mostra(ronaldo) {

    document.write(ronaldo);

}COPIAR CÓDIGO
Será que funciona? Salvaremos e recarregaremos a página:

Flávio tem 39 anos

Joaquim tem 20 anos

Barney tem 41 anosOlá pessoal!COPIAR CÓDIGO
Deu certo! As frases foram exibidas.

Aprendemos a criar uma função, mas desta vez estamos criando uma que recebe um parâmetro. Se quisermos que a função receba algo, precisaremos indicar isto incluindo um nome. Nós escolhemos ronaldo, mas para que fique mais claro, mudaremos para frase:

function mostra(frase) {

    document.write(frase);

}COPIAR CÓDIGO
Ao chamar a função mostra(), o JavaScript pegará o resultado da concatenação e interpretará como se frase fosse igual a isto. Por exemplo:

function mostra(frase) {

    document.write(frase);

}

mostra("Olá pessoal!");COPIAR CÓDIGO
Para o JavaScript, frase será igual a Olá pessoal!, e com isso conseguimos passar parâmetros para uma função. Será que é possível simplificar ainda mais nosso código? Toda vez que imprimimos uma frase, queremos pular uma linha:

<script>
    function pulaLinha() {

    document.write("<br>");
    document.write("<br>");
        }

    function mostra(frase ){

    document.write(frase);
        }

    mostra("Olá pessoal!");

    var ano = 2016;

    mostra("Flávio tem " + (ano - 1977) + " anos");

    pulaLinha();

    mostra("Joaquim tem " + (ano - 1996) + " anos");

    pulaLinha();

    ano = 2017;

    mostra("Barney tem " + (ano - 1976) + " anos");

</script>COPIAR CÓDIGO
Exceto pela última linha, que não pularemos. Removeremos a mensagem Olá pessoal!, bem como pulaLinha(), que não será inserido entre as frases. Recarregaremos a página, e temos o seguinte resultado:

Flávio tem 39 anosJoaquim tem 20 anosBarney tem 41 anosCOPIAR CÓDIGO
Nenhuma linha foi pulada. Para tornar isso mais simples, incluiremos a função pulaLinha() em mostra():

function mostra(frase) {

    document.write(frase);
    pulaLinha();
}COPIAR CÓDIGO
Agora, a função mostra() conta com duas instruções. Quando a chamamos, será feito o document.write(), exibindo-se o parâmetro, e na próxima instrução será pulada uma linha. Uma função pode ter como instrução a chamada de outra função. Salvaremos, e recarregaremos a página. Obteremos o resultado desejado:

Flávio tem 39 anos

Joaquim tem 20 anos

Barney tem 41 anosCOPIAR CÓDIGO
Se compararmos este código com o anterior, ele está mais claro. Não precisamos escrever document.write() diversas vezes, nem pular linhas em várias ocasiões. Guardamos a complexidade de pular linhas em uma única função:

function pulaLinha() {
    document.write("<br>");
    document.write("<br>");

}COPIAR CÓDIGO
E o código responsável por exibir as informações para o usuário estará em outra:

function mostra(frase) {

    document.write(frase);
    pulaLinha();
}COPIAR CÓDIGO
A diferença entre elas é que, apesar de ambas possuírem duas instruções, a primeira não recebe um parâmetro, enquanto a segunda o faz. O que acontece se inserirmos mostra() sem nenhum parâmetro em nosso código?

var ano = 2016;

mostra();COPIAR CÓDIGO
Vamos inserir, salvar o programa e recarregar o navegador. Obteremos o seguinte resultado:

undefined

Flávio tem 39 anos

Joaquim tem 20 anos

Barney tem 41 anosCOPIAR CÓDIGO
Não ocorre erro, mas é exibida a mensagem undefined, ou seja, "indefinido". Isso porque ao chamarmos a função e não passarmos um parâmetro, temos um valor de frase indefinido. Se passarmos um valor qualquer, como Calopsita!:

var ano = 2016;

mostra("Calopsita!");COPIAR CÓDIGO
E recarregarmos o navegador, veremos o seguinte resultado:

Calopsita!

Flávio tem 39 anos

Joaquim tem 20 anos

Barney tem 41 anosCOPIAR CÓDIGO
Portanto, o que acabamos de fazer é o estopim para começarmos a criar aplicações mais úteis, dar forma a programas mais elaborados. Se dominamos o conceito de função, tudo é mais fácil no mundo da programação.